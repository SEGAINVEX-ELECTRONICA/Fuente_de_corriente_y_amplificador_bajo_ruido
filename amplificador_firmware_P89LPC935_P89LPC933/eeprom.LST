C51 COMPILER V9.03   EEPROM                                                                01/09/2015 16:52:42 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN eeprom.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_V9\C51\BIN\C51.EXE eeprom.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /***********************************************************************
   2          MODULE:    EEPROM
   3          VERSION:   1.01
   4          CONTAINS:  Routines for accessing the EEPROM on the Philips
   5                     P89LPC935
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Dec 17 2014" at "12:39:44" by Code Architect 2.06
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg935.h>
  18          #include "eeprom.h"
  19          
  20          // flag that indicates if the EEPROM is busy or not
  21          static bit meeprombusy;
  22          
  23          /***********************************************************************
  24          DESC:    Initializes the EEPROM. Enables EEPROM interrupt
  25          RETURNS: Nothing
  26          CAUTION: Set EA to 1 after calling to enable all interrupts
  27          ************************************************************************/
  28          void inicializa_eeprom  (  void  )
  29          {
  30   1        // initially eeprom is not busy
  31   1        meeprombusy = 0;
  32   1        // set isr priority to 0
  33   1        // IP1 &= 0x7F;
  34   1        // IP1H &= 0x7F;
  35   1      //  // enable eeprom interrupt
  36   1      //  EIEE = 1;
  37   1        // disable eeprom interrupt
  38   1        EIEE = 0;
  39   1      }
  40          /***********************************************************************
  41          DESC:    Reads a location in the EEPROM.
  42                   If either global interrupts or the EEPROM interrupt is disabled
  43                   then the function will return when the operation is complete.
  44                   If global interrupts and the EEPROM interrupt are enabled, the
  45                   function will return immediately and an interrupt will occur
  46                   when the operation is complete.
  47          RETURNS: The 8-bit value read if interrupts are disabled, otherwise
  48                   0x00 will be returned.
  49          CAUTION: inicializa_eeprom must be called first
  50          ************************************************************************/
  51          unsigned char lee_eeprom
  52            (
  53            unsigned int address     // 9-bit address to read (0x000 - 0x1FF)
  54            )
  55          {
C51 COMPILER V9.03   EEPROM                                                                01/09/2015 16:52:42 PAGE 2   

  56   1        // wait for previous operation to complete
  57   1        while (meeprombusy);
  58   1      
  59   1        // eeprom now busy
  60   1        meeprombusy = 1;
  61   1      
  62   1        // store bit 8 of address
  63   1        // byte operation, clear interrupt flag
  64   1        DEECON = (address >> 8) & 0x01;
  65   1        // store bits 0-7 of address
  66   1        DEEADR = address & 0xFF;
  67   1      
  68   1        // if not using interrupt then poll for end of operation
  69   1        if (!EA || !EIEE)
  70   1        {
  71   2          // wait for operation to complete
  72   2          while (!(DEECON & 0x80));
  73   2          // eeprom no longer busy
  74   2          meeprombusy = 0;
  75   2          // return value
  76   2          return DEEDAT;
  77   2        }
  78   1      
  79   1        return 0x00;
  80   1      }
  81          
  82          /***********************************************************************
  83          DESC:    Writes to a location in the EEPROM.
  84                   If either global interrupts or the EEPROM interrupt is disabled
  85                   then the function will return when the operation is complete.
  86                   If global interrupts and the EEPROM interrupt are enabled, the
  87                   function will return immediately and an interrupt will occur
  88                   when the operation is complete.
  89          RETURNS: Nothing
  90          CAUTION: inicializa_eeprom must be called first
  91          ************************************************************************/
  92          void escribe_eeprom(unsigned int address,/*(0x000 - 0x1FF)*/ unsigned char value)
  93          {
  94   1        bit eacopy;
  95   1        // wait for previous operation to complete
  96   1        while (meeprombusy);
  97   1        // eeprom now busy
  98   1        meeprombusy = 1;
  99   1        // store bit 8 of address
 100   1        // byte operation, clear interrupt flag
 101   1        DEECON = (address >> 8) & 0x01;
 102   1        // disable interrupts
 103   1        eacopy = EA;
 104   1        EA = 0;
 105   1        // store value to write
 106   1        DEEDAT = value;
 107   1        // store bits 0-7 of address
 108   1        DEEADR = address & 0xFF;
 109   1        // restore interrupts
 110   1        EA = eacopy;
 111   1        // if not using interrupt then poll for end of operation
 112   1        if (!EA || !EIEE)
 113   1        {
 114   2          // wait for operation to complete
 115   2          while (!(DEECON & 0x80));
 116   2          // eeprom no longer busy
 117   2          meeprombusy = 0;
C51 COMPILER V9.03   EEPROM                                                                01/09/2015 16:52:42 PAGE 3   

 118   2        }
 119   1      }
 120          ///***********************************************************************
 121          //DESC:    Writes a value to every location in a 64-byte row in
 122          //         the EEPROM.
 123          //         If either global interrupts or the EEPROM interrupt is disabled
 124          //         then the function will return when the operation is complete.
 125          //         If global interrupts and the EEPROM interrupt are enabled, the
 126          //         function will return immediately and an interrupt will occur
 127          //         when the operation is complete.
 128          //RETURNS: Nothing
 129          //CAUTION: inicializa_eeprom must be called first
 130          //************************************************************************/
 131          //void eeprom_fillrow
 132          //  (
 133          //   unsigned int address,    // 9-bit starting address of row
 134          //                            // (64-byte aligned)
 135          //   unsigned char value      // value to fill row with
 136          //  )
 137          //{
 138          //  bit eacopy;
 139          //
 140          //  // wait for previous operation to complete
 141          //  while (meeprombusy);
 142          //
 143          //  // eeprom now busy
 144          //  meeprombusy = 1;
 145          //
 146          //  // store bit 8 of address
 147          //  // row fill operation, clear interrupt flag
 148          //  DEECON = ((address >> 8) & 0x01) | 0x20;
 149          //  // disable interrupts
 150          //  eacopy = EA;
 151          //  EA = 0;
 152          //  // store fill pattern
 153          //  DEEDAT = value;
 154          //  // store bits 0-7 of address (note bits 0-5 are ignored by device)
 155          //  DEEADR = address & 0xFF;
 156          //  // restore interrupts
 157          //  EA = eacopy;
 158          //
 159          //  // if not using interrupt then poll for end of operation
 160          //  if (!EA || !EIEE)
 161          //  {
 162          //    // wait for operation to complete
 163          //    while (!(DEECON & 0x80));
 164          //    // eeprom no longer busy
 165          //    meeprombusy = 0;
 166          //  }
 167          //}
 168          //
 169          ///***********************************************************************
 170          //DESC:    Writes a value to every location in the EEPROM.
 171          //         If either global interrupts or the EEPROM interrupt is disabled
 172          //         then the function will return when the operation is complete.
 173          //         If global interrupts and the EEPROM interrupt are enabled, the
 174          //         function will return immediately and an interrupt will occur
 175          //         when the operation is complete.
 176          //RETURNS: Nothing
 177          //CAUTION: inicializa_eeprom must be called first
 178          //************************************************************************/
 179          //void eeprom_fill
C51 COMPILER V9.03   EEPROM                                                                01/09/2015 16:52:42 PAGE 4   

 180          //  (
 181          //  unsigned char value      // value to fill EEPROM with
 182          //  )
 183          //{
 184          //  bit eacopy;
 185          //
 186          //  // wait for previous operation to complete
 187          //  while (meeprombusy);
 188          //
 189          //  // eeprom now busy
 190          //  meeprombusy = 1;
 191          //
 192          //  // bit 8 of address = 1
 193          //  // block fill operation, clear interrupt flag
 194          //  DEECON = 0x31;
 195          //  // disable interrupts
 196          //  eacopy = EA;
 197          //  EA = 0;
 198          //  // store fill pattern
 199          //  DEEDAT = value;
 200          //  // store anything to address register - value ignored by device
 201          //  DEEADR = 0x00;
 202          //  // restore interrupts
 203          //  EA = eacopy;
 204          //
 205          //  // if not using interrupt then poll for end of operation
 206          //  if (!EA || !EIEE)
 207          //  {
 208          //    // wait for operation to complete
 209          //    while (!(DEECON & 0x80));
 210          //    // eeprom no longer busy
 211          //    meeprombusy = 0;
 212          //  }
 213          //}
 214          //
 215          ///***********************************************************************
 216          //DESC:    Erases a 64-byte row in the EEPROM.
 217          //         If either global interrupts or the EEPROM interrupt is disabled
 218          //         then the function will return when the operation is complete.
 219          //         If global interrupts and the EEPROM interrupt are enabled, the
 220          //         function will return immediately and an interrupt will occur
 221          //         when the operation is complete.
 222          //         Equivalent to eeprom_fillrow(address, 0x00);
 223          //RETURNS: Nothing
 224          //CAUTION: inicializa_eeprom must be called first
 225          //************************************************************************/
 226          //void eeprom_eraserow
 227          //  (
 228          //  unsigned int address      // 9-bit starting address of row
 229          //                            // (64-byte aligned)
 230          //  )
 231          //{
 232          //  eeprom_fillrow(address, 0x00);
 233          //}
 234          //
 235          ///***********************************************************************
 236          //DESC:    Erases the EEPROM.
 237          //         If either global interrupts or the EEPROM interrupt is disabled
 238          //         then the function will return when the operation is complete.
 239          //         If global interrupts and the EEPROM interrupt are enabled, the
 240          //         function will return immediately and an interrupt will occur
 241          //         when the operation is complete.
C51 COMPILER V9.03   EEPROM                                                                01/09/2015 16:52:42 PAGE 5   

 242          //         Equivalent to eeprom_fill(0x00);
 243          //RETURNS: Nothing
 244          //CAUTION: inicializa_eeprom must be called first
 245          //************************************************************************/
 246          //void eeprom_erase
 247          //  (
 248          //  void
 249          //  )
 250          //{
 251          //  eeprom_fill(0x00);
 252          //}
 253          //
 254          ///***********************************************************************
 255          //DESC:    EEPROM Interrupt Service Routine
 256          //         Called when an EEPROM operation has completed
 257          //         Uses register bank 3
 258          //RETURNS: Nothing
 259          //CAUTION: inicializa_eeprom must be called first
 260          //************************************************************************/
 261          //void eeprom_isr
 262          //  (
 263          //  void
 264          //  ) interrupt 14 using 3
 265          //{
 266          //  // clear EEIF flag
 267          //  DEECON &= ~0x80;
 268          //  // eeprom no longer busy
 269          //  meeprombusy = 0;
 270          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     84    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
